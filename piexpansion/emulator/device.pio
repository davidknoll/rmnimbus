; Emulate a device on the Nimbus expansion bus
; Side-set pins should be nWAIT only
; JMP pin should be the desired nCSx
; IN and OUT pins should both be the range covering ADx
.program device
.side_set 1 opt

; Pin mappings
.define nINT2 0
.define nINT1 1
.define nINT0 2
.define nDMA 3
.define nCS3 4
.define nCS2 5
.define nCS1 6
.define nCS0 7
.define nRESET 8
.define nWAIT 9
.define IORQ 10
.define WR 11
.define RD 12
.define nALE 13
.define AD7 14
.define AD6 15
.define AD0 20
.define AD1 21
.define AD2 22
.define AD3 26
.define AD4 27
.define AD5 28

.wrap_target
begin:
  wait 0 gpio nALE        ; address incoming
  wait 1 gpio nALE
  jmp pin begin           ; if it's not for us, go back and wait
  in pins, 15             ; get the address
  wait 1 gpio IORQ side 0 ; wait for RD or WR, assert nWAIT
  push block              ; ARM will then deal with the data
  irq set 0 rel

  wait 0 gpio IORQ        ; ARM will deassert nWAIT so cycle ends
  irq clear 0 rel
  mov osr, null           ; make sure data pins are inputs again
  out pindirs, 15
.wrap

% c-sdk {
#include "pinmap.h"

struct busreq {
  bool isread;
  uint cs;
  uint address;
  uint data;
};

void device_program_init(PIO pio, uint sm, uint offset, uint cs) {
  // All our outputs are open-drain as far as the bus is concerned
  // due to the MOSFET level translators
  pinMode(nINT2, OUTPUT);
  pinMode(nINT1, OUTPUT);
  pinMode(nINT0, OUTPUT);
  pinMode(nDMA, OUTPUT);
  pinMode(nCS3, INPUT);
  pinMode(nCS2, INPUT);
  pinMode(nCS1, INPUT);
  pinMode(nCS0, INPUT);
  pinMode(nRESET, INPUT);
  pinMode(WR, INPUT);
  pinMode(RD, INPUT);
  digitalWrite(nINT2, HIGH);
  digitalWrite(nINT1, HIGH);
  digitalWrite(nINT0, HIGH);
  digitalWrite(nDMA, HIGH);

  // Claim certain pins for the PIO, others are only touched by the ARM
  pio_gpio_init(pio, nWAIT);
  pio_gpio_init(pio, IORQ);
  pio_gpio_init(pio, nALE);
  pio_gpio_init(pio, AD7);
  pio_gpio_init(pio, AD6);
  pio_gpio_init(pio, AD0);
  pio_gpio_init(pio, AD1);
  pio_gpio_init(pio, AD2);
  pio_gpio_init(pio, AD3);
  pio_gpio_init(pio, AD4);
  pio_gpio_init(pio, AD5);

  pio_sm_config c = device_program_get_default_config(offset);
  sm_config_set_in_pins(&c, 14); // Cover the range containing AD0-7
  sm_config_set_out_pins(&c, 14, 15);
  sm_config_set_sideset_pins(&c, nWAIT);
  sm_config_set_jmp_pin(&c, 7 - cs);
  sm_config_set_in_shift(&c, false, false, 0); // left shift, no auto-push
  sm_config_set_out_shift(&c, true, false, 0); // right shift, no auto-pull

  pio_sm_claim(pio, sm);
  pio_sm_init(pio, sm, offset, &c);
  pio_sm_set_pindirs_with_mask(pio, sm, 1 << nWAIT, ~0);
  pio_sm_set_pins_with_mask(pio, sm, 1 << nWAIT, 1 << nWAIT);
  switch (sm) {
    case 0: pio_set_irq0_source_enabled(pio, pis_interrupt0, true); break;
    case 1: pio_set_irq0_source_enabled(pio, pis_interrupt1, true); break;
    case 2: pio_set_irq0_source_enabled(pio, pis_interrupt2, true); break;
    case 3: pio_set_irq0_source_enabled(pio, pis_interrupt3, true); break;
  }
  pio_sm_set_enabled(pio, sm, true);
}

struct busreq *device_program_get(PIO pio, uint sm, struct busreq *req) {
  // Return null if:
  //  Passed a null pointer
  //  No request is waiting
  //  Request is for an odd address
  if (req == nullptr) { return nullptr; }
  uint32_t addr = pio_sm_get(pio, sm);
  if (pio->fdebug & (1 << (PIO_FDEBUG_RXUNDER_LSB + sm))) {
    pio->fdebug = 1 << (PIO_FDEBUG_RXUNDER_LSB + sm);
    return nullptr;
  }
  if (addr & (1 << 6)) { // AD0
    pio_sm_set_pins_with_mask(pio, sm, 1 << nWAIT, 1 << nWAIT);
    return nullptr;
  }

  // Look at the configured JMP pin for which CS we're using
  uint cspin = (pio->sm[sm].execctrl & PIO_SM0_EXECCTRL_JMP_PIN_BITS) >> PIO_SM0_EXECCTRL_JMP_PIN_LSB;
  req->isread = digitalRead(RD);
  req->cs = 7 - cspin;
  req->address =
    // No AD7 as each select only gets 80h of address space
    // No AD0 as the Nimbus expansion bus is only 8 bits, so odd accesses don't work
    (addr & (1 <<  1) ? 0x40 : 0x00) | // AD6
    (addr & (1 << 14) ? 0x20 : 0x00) | // AD5
    (addr & (1 << 13) ? 0x10 : 0x00) | // AD4
    (addr & (1 << 12) ? 0x08 : 0x00) | // AD3
    (addr & (1 <<  8) ? 0x04 : 0x00) | // AD2
    (addr & (1 <<  7) ? 0x02 : 0x00);  // AD1

  if (req->isread) {
    // Don't release nWAIT yet, calling program has to respond
    req->data = 0xFF;
  } else {
    // Capture the data being written to us, and release nWAIT to end the cycle
    req->data =
      (digitalRead(AD7) ? 0x80 : 0x00) |
      (digitalRead(AD6) ? 0x40 : 0x00) |
      (digitalRead(AD5) ? 0x20 : 0x00) |
      (digitalRead(AD4) ? 0x10 : 0x00) |
      (digitalRead(AD3) ? 0x08 : 0x00) |
      (digitalRead(AD2) ? 0x04 : 0x00) |
      (digitalRead(AD1) ? 0x02 : 0x00) |
      (digitalRead(AD0) ? 0x01 : 0x00);
    pio_sm_set_pins_with_mask(pio, sm, 1 << nWAIT, 1 << nWAIT);
  }

  return req;
}

struct busreq *device_program_respond(PIO pio, uint sm, struct busreq *req) {
  if (req == nullptr) { return nullptr; }
  const uint32_t dirmask =
    (1 << AD7) | (1 << AD6) | (1 << AD5) | (1 << AD4) |
    (1 << AD3) | (1 << AD2) | (1 << AD1) | (1 << AD0);

  pio_sm_set_pindirs_with_mask(pio, sm, dirmask, dirmask);
  pio_sm_set_pins_with_mask(pio, sm,
    ((req->data & 0x80) ? (1 << AD7) : 0x00) |
    ((req->data & 0x40) ? (1 << AD6) : 0x00) |
    ((req->data & 0x20) ? (1 << AD5) : 0x00) |
    ((req->data & 0x10) ? (1 << AD4) : 0x00) |
    ((req->data & 0x08) ? (1 << AD3) : 0x00) |
    ((req->data & 0x04) ? (1 << AD2) : 0x00) |
    ((req->data & 0x02) ? (1 << AD1) : 0x00) |
    ((req->data & 0x01) ? (1 << AD0) : 0x00),
    dirmask
  );

  pio_sm_set_pins_with_mask(pio, sm, 1 << nWAIT, 1 << nWAIT);
  return req;
}

%}
